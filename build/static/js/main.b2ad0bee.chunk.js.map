{"version":3,"sources":["queries/queries.js","components/DepressiondegreeList.js","components/AddDepressiondegree.js","components/SituationList.js","components/AddSituation.js","components/KieslerCircleList.js","components/AddKieslerCircle.js","components/GetAuthorId.js","components/AddRegistration.js","App.js","registerServiceWorker.js","index.js"],"names":["getAuthorsQuery","gql","_templateObject","getAuthorQuery","_templateObject2","getAuthorIDQuery","_templateObject3","getDepressiondegreesQuery","_templateObject4","getKieslerCircleQuery","_templateObject5","getSituationsQuery","_templateObject6","addAuthorMutation","_templateObject7","addDepressiondegreeMutation","_templateObject8","addKieslerCircleMutation","_templateObject9","addSituationMutation","_templateObject10","_templateObject11","_templateObject12","_templateObject13","DepressiondegreeList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selected","author","data","depressiondegrees","map","depressiondegree","degree","date","loading","react_default","a","createElement","localStorage","setItem","JSON","stringify","key","id","parse","getItem","navigator","onLine","scrollArea_default","speed","className","contentClassName","horizontal","displayDepressiondegrees","restoreStateFromLocalStorage","Component","graphql","options","variables","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","authorId","AddDepressiondegree","e","preventDefault","refetchQueries","query","_this2","onSubmit","submitForm","bind","type","onChange","setState","target","value","components_DepressiondegreeList","compose","name","SituationList","situations","situation","title","displaySituations","AddSituation","description","components_SituationList","KieslerCircleList","kieslers","kiesler","circlename","displayKieslerCircle","AddKieslerCircle","components_KieslerCircleList","GetAuthorId","authorIds","getAuthorId","email","emailId","AddRegistration","surname","age","gender","phase","firstEnte","time","getTime","firstEnter","getHours","getMinutes","getSeconds","client","ApolloClient","uri","NavLinks","NavLink","to","NavLinkRegister","Link","AppState","loggedIn","login","logout","Admin","history","replace","onClick","Redirect","React","Login","password","showPromptOnNav","event","length","alert","handleFormSubmit","placeholder","saveEmail","components_GetAuthorId","savePassword","Prompt","when","message","BrowserRouter","Switch","Route","path","component","App","react_apollo_browser_umd","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b2ad0bee.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\r\n\r\nconst getAuthorsQuery = gql`\r\n    {\r\n        authors {\r\n            name\r\n            surname\r\n            age\r\n            email\r\n            gender\r\n            phase\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nconst getAuthorQuery = gql`\r\nquery GetAuthor($id: ID!){\r\n        author(id: $id) {\r\n            name\r\n            id\r\n            depressiondegrees {\r\n                degree\r\n                date\r\n              }\r\n            situations {\r\n                title\r\n                date\r\n            }\r\n            kieslers {\r\n                circlename\r\n                date\r\n            }\r\n            situationCounts {\r\n                count\r\n                date\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst getAuthorIDQuery = gql`\r\n    query GetAuthorID($email: String!){\r\n        authorIds(email: $email) {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nconst getDepressiondegreesQuery = gql`\r\n    {\r\n        depressiondegrees {\r\n            degree\r\n            date\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst getKieslerCircleQuery = gql`\r\n    {\r\n        kieslerCircles {\r\n            circlename\r\n            date\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nconst getSituationsQuery = gql`\r\n    {\r\n        situations {\r\n            title\r\n            description\r\n            date\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nconst addAuthorMutation = gql`\r\n    mutation AddAuthor($name: String!, $surname: String!, $age: Int!, $gender: String!, $email: String!, $phase: String!, $date: String!){\r\n        addAuthor(name: $name, surname: $surname, age: $age, gender: $gender, email: $email, phase: $phase, date: $date){\r\n            name\r\n            surname\r\n            age\r\n            gender\r\n            email\r\n            phase\r\n            date\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nconst addDepressiondegreeMutation = gql`\r\n    mutation AddDepressiondegree($degree: Int!, $date: String!, $authorId: ID!){\r\n        addDepressiondegree(degree: $degree, date: $date, authorId: $authorId){\r\n            degree\r\n            date\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nconst addKieslerCircleMutation = gql`\r\n    mutation AddKieslerCircle($circlename: String!, $date: String!, $authorId: ID!){\r\n        addKiesler (circlename: $circlename, date: $date, authorId: $authorId){\r\n            circlename\r\n            date\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nconst addSituationMutation = gql`\r\n    mutation AddSituation($title: String!, $description: String!, $date: String!, $authorId: ID!){\r\n        addSituation(title: $title, description: $description, date: $date, authorId: $authorId){\r\n            title\r\n            description\r\n            date\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nconst addLoginStatisticMutation = gql`\r\n    mutation AddLoginStatistic($day: Int!, $date: String!, $logintime: String!, $duration: String!, $authorId: ID!, $email: String!){\r\n        addLoginStatistic(day: $day, date: $date, logintime: $logintime, duration: $duration, authorId: $authorId, email: $email){\r\n            day\r\n            date\r\n            logintime\r\n            duration\r\n            email\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nconst getDepressiondegreeQuery = gql`\r\n    query GetDepressiondegree($id: ID!){\r\n        depressiondegree(id: $id) {\r\n            id\r\n            degree\r\n            date\r\n            author {\r\n                id\r\n                name\r\n                surname\r\n                age\r\n                email\r\n                phase\r\n                depressiondegrees {\r\n                    degree\r\n                    id\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst getSituationQuery = gql`\r\n    query GetSituation($id: ID!){\r\n        situation(id: $id) {\r\n            id\r\n            title\r\n            description\r\n            date\r\n            author {\r\n                id\r\n                name\r\n                surname\r\n                age\r\n                email\r\n                phase\r\n                situations {\r\n                    title\r\n                    description\r\n                    id\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport { getAuthorsQuery, getDepressiondegreesQuery, getSituationsQuery, addDepressiondegreeMutation, addSituationMutation, \r\n    getDepressiondegreeQuery, getSituationQuery, addLoginStatisticMutation, addAuthorMutation, getAuthorIDQuery, getAuthorQuery, \r\n    getKieslerCircleQuery, addKieslerCircleMutation };\r\n","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { getAuthorQuery } from '../queries/queries';\r\nimport ScrollArea from 'react-scrollbar';\r\n\r\n// components\r\n//import DepressiondegreeDetails from './DepressiondegreeDetails';\r\nclass DepressiondegreeList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            selected: null\r\n        }\r\n    }\r\n    \r\n    getDepressionDegree(){\r\n        const { author } = this.props.data;\r\n        if(author){\r\n            return author.depressiondegrees.map(depressiondegree => {\r\n                return depressiondegree.degree, depressiondegree.date \r\n            })\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    displayDepressiondegrees(){\r\n        var data = this.props.data;\r\n        if(data.loading){\r\n            return( <div>Loading depression degrees...</div> );\r\n        } else {\r\n            return data.author.depressiondegrees.map(depressiondegree => {\r\n                localStorage.setItem(\"degrees\", JSON.stringify(depressiondegree.degree));\r\n                localStorage.setItem(\"dates\", JSON.stringify(depressiondegree.date));\r\n                return(\r\n                    <li key={ depressiondegree.id }><div>Degree:</div>{ depressiondegree.degree}\r\n                    <div>Date:</div>{ depressiondegree.date }<br/></li>\r\n                );\r\n            })\r\n        }\r\n    }\r\n    restoreStateFromLocalStorage(){\r\n        \r\n        return <li><div>Degree:</div>{ JSON.parse(localStorage.getItem(\"degrees\"))}\r\n        <div>Date:</div>{ JSON.parse(localStorage.getItem(\"dates\")) }<br/></li>\r\n    }\r\n    render(){\r\n        if (!navigator.onLine) {\r\n\t\t\treturn (\r\n                <ScrollArea\r\n                speed={0.8}\r\n                className=\"area\"\r\n                contentClassName=\"content\"\r\n                horizontal={false}\r\n                >\r\n                <div><ul>\r\n                { this.restoreStateFromLocalStorage() }\r\n                    </ul></div>\r\n              </ScrollArea>\r\n               \r\n            );\r\n} else {\r\n        return(\r\n            <ScrollArea\r\n            speed={0.8}\r\n            className=\"area\"\r\n            contentClassName=\"content\"\r\n            horizontal={false}\r\n            >\r\n            <div><ul>\r\n            { this.displayDepressiondegrees() }\r\n                </ul></div>\r\n          </ScrollArea>\r\n           \r\n        );\r\n    }\r\n}\r\n}\r\n\r\nexport default graphql(getAuthorQuery, {\r\n    options: (props) => {\r\n        return {\r\n            variables: {\r\n                id: localStorage.getItem('authorid')\r\n            }\r\n        }\r\n    }\r\n})(DepressiondegreeList);\r\n","import React, { Component } from 'react';\r\nimport { graphql, compose } from 'react-apollo';\r\nimport { getAuthorsQuery, addDepressiondegreeMutation, getDepressiondegreesQuery } from '../queries/queries';\r\nimport DepressiondegreeList from './DepressiondegreeList';\r\n\r\nvar today = new Date();\r\nvar dd = today.getDate();\r\nvar mm = today.getMonth()+1; //January is 0!\r\nvar yyyy = today.getFullYear();\r\n\r\nif(dd < 10) {\r\n    dd = '0' + dd\r\n} \r\n\r\nif(mm < 10) {\r\n    mm = '0' + mm\r\n} \r\n\r\ntoday = mm + '/' + dd + '/' + yyyy;\r\n\r\nvar authorId = localStorage.getItem('authorid');\r\n\r\nclass AddDepressiondegree extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            degree: '',\r\n            date: '' + today,\r\n            authorId: '' + authorId\r\n        };\r\n    }\r\n    submitForm(e){\r\n        e.preventDefault();\r\n        // use the addDepressiondegreeMutation\r\n        this.props.addDepressiondegreeMutation({\r\n            variables: {\r\n                degree: this.state.degree,\r\n                date: this.state.date,\r\n                authorId: this.state.authorId\r\n            },\r\n            refetchQueries: [{ query: getDepressiondegreesQuery }]\r\n        });\r\n    }\r\n    render(){\r\n        return(\r\n            <form id=\"add-depressiondegree\" onSubmit={ this.submitForm.bind(this) } >\r\n                <div className=\"field\">\r\n                    <label>Depression degree:</label>\r\n                    <input type=\"text\" onChange={ (e) => this.setState({ degree: e.target.value }) } />\r\n                    <DepressiondegreeList/>\r\n                </div>\r\n                <button>+</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\r\n    graphql(addDepressiondegreeMutation, { name: \"addDepressiondegreeMutation\" })\r\n)(AddDepressiondegree);\r\n","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { getAuthorQuery } from '../queries/queries';\r\nimport ScrollArea from 'react-scrollbar';\r\n\r\n// components\r\n//import DepressiondegreeDetails from './DepressiondegreeDetails';\r\n\r\nclass SituationList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            selected: null\r\n        }\r\n    }\r\n\r\n    displaySituations(){\r\n        var data = this.props.data;\r\n        if(data.loading){\r\n            return( <div>Loading situations...</div> );\r\n        } else {\r\n            return data.author.situations.map(situation => {\r\n                localStorage.setItem(\"SituationTitle\", situation.title);\r\n                localStorage.setItem(\"SituationDate\", situation.date);\r\n                return(\r\n                    <li key={ situation.id }><div>Title:</div>{ situation.title}<div>Date:</div>{ situation.date }<br/></li>\r\n                );\r\n            })\r\n        }\r\n    }\r\n    restoreStateFromLocalStorage(){\r\n        \r\n        return <li><div>Title:</div>{ localStorage.getItem(\"SituationTitle\") }\r\n        <div>Date:</div>{ localStorage.getItem(\"SituationDate\") }<br/></li>\r\n    }\r\n    render(){\r\n        if (!navigator.onLine) {\r\n\t\t\treturn (\r\n                <ScrollArea\r\n                speed={0.8}\r\n                className=\"area\"\r\n                contentClassName=\"content\"\r\n                horizontal={false}\r\n                >\r\n                <div><ul>\r\n                { this.restoreStateFromLocalStorage() }\r\n                    </ul></div>\r\n              </ScrollArea>\r\n               \r\n            );\r\n} else {\r\n        return(\r\n            <ScrollArea\r\n            speed={0.8}\r\n            className=\"area\"\r\n            contentClassName=\"content\"\r\n            horizontal={false}\r\n            >\r\n            <div><ul>\r\n                    { this.displaySituations() }\r\n                </ul></div>\r\n          </ScrollArea>\r\n        );\r\n    }\r\n}\r\n}\r\n\r\nexport default graphql(getAuthorQuery, {\r\n    options: (props) => {\r\n        return {\r\n            variables: {\r\n                id: localStorage.getItem('authorid')\r\n            }\r\n        }\r\n    }\r\n})(SituationList);\r\n","import React, { Component } from 'react';\r\nimport { graphql, compose } from 'react-apollo';\r\nimport { getAuthorsQuery, addSituationMutation, getSituationsQuery } from '../queries/queries';\r\nimport SituationList from './SituationList';\r\n\r\nvar today = new Date();\r\nvar dd = today.getDate()-1;\r\nvar mm = today.getMonth()+1; //January is 0!\r\nvar yyyy = today.getFullYear();\r\n\r\nif(dd < 10) {\r\n    dd = '0' + dd\r\n} \r\n\r\nif(mm < 10) {\r\n    mm = '0' + mm\r\n} \r\n\r\ntoday = mm + '/' + dd + '/' + yyyy;\r\nvar authorId = localStorage.getItem('authorid');\r\n\r\nclass AddSituation extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            description: '',\r\n            date: '' + today,\r\n            authorId: '' + authorId\r\n        };\r\n    }\r\n    submitForm(e){\r\n        e.preventDefault();\r\n        // use the addSituationMutation\r\n        this.props.addSituationMutation({\r\n            variables: {\r\n                title: this.state.title,\r\n                description: this.state.description,\r\n                date: this.state.date,\r\n                authorId: this.state.authorId\r\n            },\r\n            refetchQueries: [{ query: getSituationsQuery }]\r\n        });\r\n    }\r\n    render(){\r\n        return(\r\n            <form id=\"add-situation\" onSubmit={ this.submitForm.bind(this) } >\r\n                <div className=\"field\">\r\n                    <label>Situation Title:</label>\r\n                    <input type=\"text\" onChange={ (e) => this.setState({ title: e.target.value }) } />\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label>Situation Description:</label>\r\n                    <input type=\"text\" onChange={ (e) => this.setState({ description: e.target.value }) } />\r\n                </div>\r\n                <button>Add</button>\r\n                <SituationList/>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(addSituationMutation, { name: \"addSituationMutation\" })\r\n)(AddSituation);\r\n","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { getAuthorQuery } from '../queries/queries';\r\nimport ScrollArea from 'react-scrollbar';\r\n\r\n// components\r\n//import DepressiondegreeDetails from './DepressiondegreeDetails';\r\nclass KieslerCircleList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            selected: null\r\n        }\r\n    }\r\n\r\n    displayKieslerCircle(){\r\n        var data = this.props.data;\r\n        if(data.loading){\r\n            return( <div>Loading kiesler circle...</div> );\r\n        } else {\r\n            return data.author.kieslers.map(kiesler => {\r\n                localStorage.setItem(\"KieslerTitle\", kiesler.circlename);\r\n                localStorage.setItem(\"KieslerDate\", kiesler.date);\r\n                return(\r\n                    <li key={ kiesler.id }><div>Kiesler:</div>{ kiesler.circlename}<div>Date:</div>{ kiesler.date }<br/></li>\r\n                );\r\n            })\r\n        }\r\n    }\r\n    restoreStateFromLocalStorage(){\r\n        \r\n        return <li><div>Kiesler:</div>{ localStorage.getItem(\"KieslerTitle\") }\r\n        <div>Date:</div>{ localStorage.getItem(\"KieslerDate\") }<br/></li>\r\n    }\r\n    render(){\r\n        if (!navigator.onLine) {\r\n\t\t\treturn (\r\n                <ScrollArea\r\n                speed={0.8}\r\n                className=\"area\"\r\n                contentClassName=\"content\"\r\n                horizontal={false}\r\n                >\r\n                <div><ul>\r\n                { this.restoreStateFromLocalStorage() }\r\n                    </ul></div>\r\n              </ScrollArea>\r\n               \r\n            );\r\n} else {\r\n        return(\r\n            <ScrollArea\r\n            speed={0.8}\r\n            className=\"area\"\r\n            contentClassName=\"content\"\r\n            horizontal={false}\r\n            >\r\n            <div><ul>\r\n                { this.displayKieslerCircle() }\r\n                </ul></div>\r\n          </ScrollArea>\r\n           \r\n        );\r\n    }\r\n}\r\n}\r\n\r\nexport default graphql(getAuthorQuery, {\r\n    options: (props) => {\r\n        return {\r\n            variables: {\r\n                id: localStorage.getItem('authorid')\r\n            }\r\n        }\r\n    }\r\n})(KieslerCircleList);\r\n","import React, { Component } from 'react';\r\nimport { graphql, compose } from 'react-apollo';\r\nimport { addKieslerCircleMutation, getKieslerCircleQuery } from '../queries/queries';\r\nimport KieslerCircleList from './KieslerCircleList';\r\n\r\nvar today = new Date();\r\nvar dd = today.getDate();\r\nvar mm = today.getMonth()+1; //January is 0!\r\nvar yyyy = today.getFullYear();\r\n\r\nif(dd < 10) {\r\n    dd = '0' + dd\r\n} \r\n\r\nif(mm < 10) {\r\n    mm = '0' + mm\r\n} \r\n\r\ntoday = mm + '/' + dd + '/' + yyyy;\r\n\r\nvar authorId = localStorage.getItem('authorid');\r\n\r\nclass AddKieslerCircle extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            circlename: '',\r\n            date: '' + today,\r\n            authorId: '' + authorId\r\n        };\r\n    }\r\n    submitForm(e){\r\n        e.preventDefault();\r\n        // use the addDepressiondegreeMutation\r\n        this.props.addKieslerCircleMutation({\r\n            variables: {\r\n                circlename: this.state.circlename,\r\n                date: this.state.date,\r\n                authorId: this.state.authorId\r\n            },\r\n            refetchQueries: [{ query: getKieslerCircleQuery }]\r\n        });\r\n    }\r\n    render(){\r\n        return(\r\n            <form id=\"add-kieslercircle\" onSubmit={ this.submitForm.bind(this) } >\r\n                <div className=\"field\">\r\n                    <label>Kiesler Kreis:</label>\r\n                    <select onChange={ (e) => this.setState({ circlename: e.target.value }) } >\r\n                        <option>Freundlich</option>\r\n                        <option>Freundlich-Dominant</option>\r\n                        <option>Dominant</option>\r\n                        <option>Freundlich-Unterwürfig</option>\r\n                        <option>Unterwürfig</option>\r\n                        <option>Feindselig-Unterwürfig</option>\r\n                        <option>Feindselig</option>\r\n                        <option>Feindselig-Dominant</option>\r\n                    </select>\r\n                    <KieslerCircleList/>\r\n                </div>\r\n                <button>+</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(addKieslerCircleMutation, { name: \"addKieslerCircleMutation\" })\r\n)(AddKieslerCircle);\r\n","import React, { Component } from 'react';\r\nimport { graphql, compose } from 'react-apollo';\r\nimport { getAuthorIDQuery } from '../queries/queries';\r\n\r\n\r\nclass GetAuthorId extends Component {\r\n\r\n    getAuthorId(){\r\n        const { authorIds } = this.props.data;\r\n        if(authorIds){\r\n            return authorIds.map(author => {\r\n                return localStorage.setItem(\"authorid\", author.id);\r\n            });\r\n        } else {\r\n            return( <div></div> );\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div id=\"getAuthorId\">\r\n                { this.getAuthorId() }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default graphql(getAuthorIDQuery, {\r\n    options: (props) => {\r\n        return {\r\n            variables: {\r\n                email: props.emailId\r\n            }\r\n        }\r\n    }\r\n})(GetAuthorId);\r\n","import React, { Component } from 'react';\r\nimport { graphql, compose } from 'react-apollo';\r\nimport { getAuthorsQuery, addAuthorMutation } from '../queries/queries';\r\n\r\nvar today = new Date();\r\nvar dd = today.getDate();\r\nvar mm = today.getMonth()+1; //January is 0!\r\nvar yyyy = today.getFullYear();\r\n\r\nif(dd < 10) {\r\n    dd = '0' + dd\r\n} \r\n\r\nif(mm < 10) {\r\n    mm = '0' + mm\r\n} \r\n\r\ntoday = mm + '/' + dd + '/' + yyyy;\r\n\r\nclass AddRegistration extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            surname: '',\r\n            age: '',\r\n            email: '',\r\n            gender: '',\r\n            phase: '',\r\n            date: '' + today\r\n        };\r\n    }\r\n   \r\n    submitForm(e){\r\n        e.preventDefault();\r\n        // use the addSituationMutation\r\n        this.props.addAuthorMutation({\r\n            variables: {\r\n                name: this.state.name,\r\n                surname: this.state.surname,\r\n                age: this.state.age,\r\n                email: this.state.email,\r\n                gender: this.state.gender,\r\n                phase: this.state.phase,\r\n                date: this.state.date\r\n            },\r\n            refetchQueries: [{ query: getAuthorsQuery }]\r\n        });\r\n    }\r\n    render(){\r\n        return(\r\n            <form id=\"add-registration\" onSubmit={ this.submitForm.bind(this) } >\r\n                <div className=\"field\">\r\n                    <label>Vorname:</label>\r\n                    <input type=\"text\" onChange={ (e) => this.setState({ name: e.target.value }) } />\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label>Nachname:</label>\r\n                    <input type=\"text\" onChange={ (e) => this.setState({ surname: e.target.value }) } />\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label>Alter:</label>\r\n                    <input type=\"text\" onChange={ (e) => this.setState({ age: e.target.value }) } />\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label>Email:</label>\r\n                    <input type=\"text\" onChange={ (e) => this.setState({ email: e.target.value }) } />\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label>Geschlecht:</label>\r\n                    <select onChange={ (e) => this.setState({ gender: e.target.value }) } >\r\n                        <option selected value=\"\">Wählen Ihr Geschlecht</option>\r\n                        <option value=\"Männlich\">Männlich</option>\r\n                        <option value=\"Weiblich\">Weiblich</option>\r\n                        <option value=\"Drittes\">Drittes</option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label>Therapie-Phase:</label>\r\n                    <select onChange={ (e) => this.setState({ phase: e.target.value }) } >\r\n                        <option selected value=\"\">Wählen eine Phase</option>\r\n                        <option value=\"Klinik\">Klinik</option>\r\n                        <option value=\"Tages-Klinik\">Tages-Klinik</option>\r\n                        <option value=\"Ambulant\">Ambulant</option>\r\n                        <option value=\"Wartezeit\">Wartezeit</option>\r\n                        <option value=\"Rückfall-Prophylaxe\">Rückfall-Prophylaxe</option>\r\n                    </select>\r\n                </div>\r\n                <button>Registrieren</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(addAuthorMutation, { name: \"addAuthorMutation\" })\r\n)(AddRegistration);\r\n","import React, { Component } from 'react';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { BrowserRouter as Router, NavLink, Route, Switch, Redirect, Prompt } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { ApolloProvider } from 'react-apollo';\r\n\r\n// components\r\nimport AddDepressiondegree from './components/AddDepressiondegree';\r\nimport AddSituation from './components/AddSituation';\r\nimport AddKieslerCircle from './components/AddKieslerCircle';\r\nimport GetAuthorId from './components/GetAuthorId';\r\nimport AddRegistration from './components/AddRegistration';\r\n\r\nvar firstEnte = new Date();\r\nvar dd = firstEnte.getDate();\r\nvar mm = firstEnte.getMonth()+1; //January is 0!\r\nvar yyyy = firstEnte.getFullYear();\r\nvar time = firstEnte.getTime();\r\n\r\nif(dd < 10) {\r\n    dd = '0' + dd\r\n} \r\n\r\nif(mm < 10) {\r\n    mm = '0' + mm\r\n} \r\n\r\nvar firstEnter = mm + '/' + dd + '/' + yyyy + '-' + firstEnte.getHours() + \":\" + firstEnte.getMinutes() + \":\" + firstEnte.getSeconds();\r\nlocalStorage.setItem(\"firstEnter\",firstEnter);\r\nlocalStorage.setItem(\"time\",time);\r\n\r\nconst Home = () => <h1>Home Component</h1>;\r\n\r\n// apollo client setup\r\nconst client = new ApolloClient({\r\n    uri: 'http://localhost:4000/graphql'\r\n});\r\n\r\nfunction NavLinks() {\r\n    return(\r\n        <div className=\"links\">\r\n            <NavLink to=\"/depressiondegree\" className=\"link\"> _Depressionsgrad_ </NavLink>\r\n            <NavLink to=\"/situation\" className=\"link\"> _Situation Analyse_ </NavLink>\r\n            <NavLink to=\"/kiesler\" className=\"link\"> _Kiesler Kreis_ </NavLink>\r\n            <NavLink to=\"/admin\" className=\"link\"> _Logout_ </NavLink>\r\n        </div>\r\n    );\r\n}\r\nfunction NavLinkRegister() {\r\n    return(\r\n        <div className=\"links\">\r\n            <Link to=\"/registration\" className=\"link\"> Registration </Link>\r\n        </div>\r\n    );\r\n}\r\nconst AppState = {\r\n    loggedIn: false,\r\n    login: function(){\r\n        this.loggedIn = true;\r\n    },\r\n    logout: function(){\r\n        this.loggedIn = false;\r\n    }\r\n};\r\n\r\nclass Admin extends React.Component {\r\n    constructor( props ) {\r\n        super( props );\r\n    }\r\n\r\n    logout() {\r\n        AppState.logout();\r\n        this.props.history.replace( '/' );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            AppState.loggedIn ? (\r\n                <div>\r\n                    <h1>Welcome to Depression App.</h1>\r\n                    <h1>To sign out press \"Logout\" button.</h1>\r\n                    <button onClick={ this.logout.bind(this) }>Logout</button>\r\n                </div>\r\n            ) : <Redirect to=\"/\" />\r\n        );\r\n    }\r\n}\r\nclass Login extends React.Component {\r\n    constructor( props ) {\r\n        super( props );\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            showPromptOnNav: false\r\n        };\r\n    }\r\n\r\n    savePassword( event ) {\r\n        this.setState({\r\n            password: event.target.value,\r\n            showPromptOnNav: event.target.value.length > 0\r\n        });\r\n    }\r\n    saveEmail( event ) {\r\n        this.setState({\r\n            email: event.target.value,\r\n            showPromptOnNav: event.target.value.length > 0\r\n        });\r\n    }\r\n\r\n    handleFormSubmit( event ) {\r\n        event.preventDefault();\r\n\r\n        if( this.state.password == 'password' ) {\r\n            AppState.login();\r\n            this.props.history.replace( '/admin' );\r\n        }\r\n        else{\r\n            alert('Password is wrong.');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={ this.handleFormSubmit.bind( this ) }>\r\n           \r\n                <h3>Please sign in</h3>\r\n\r\n                <input type=\"email\" \r\n                placeholder=\"Type email\" \r\n                value={ this.state.email } \r\n                onChange={ this.saveEmail.bind( this ) }/>\r\n                \r\n                <GetAuthorId emailId={ this.state.email } />\r\n                <GetAuthorId/>\r\n                <input type=\"password\" \r\n                placeholder=\"Type password\" \r\n                value={ this.state.password } \r\n                onChange={ this.savePassword.bind( this ) }/>\r\n\r\n                <button type=\"submit\"> Submit </button>\r\n                <Prompt when={ this.state.showPromptOnNav }\r\n                message=\"Are you sure? Your data will be lost.\"/>\r\n\r\n                <Router>\r\n                    <div>\r\n                    <NavLinkRegister />\r\n                        <Switch>\r\n                            <Route path=\"/registration\" component={ AddRegistration }/>\r\n                        </Switch>\r\n                    </div>\r\n                </Router>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n        <ApolloProvider client={client}>\r\n            <Router>\r\n                <div id=\"main\">\r\n                <NavLinks />\r\n\r\n                    <div className=\"views\">\r\n                        <Switch>\r\n                            <Route exact={ true } path=\"/\" component={ Login }/>\r\n                            <Route path=\"/depressiondegree\" component={ AddDepressiondegree }/>\r\n                            <Route path=\"/admin\" component={ Admin }/>\r\n                            <Route path=\"/registration\" component={ AddRegistration }/>\r\n                            <Route path=\"/situation\" component={ AddSituation }/>\r\n                            <Route path=\"/kiesler\" component={ AddKieslerCircle }/>\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </Router>\r\n        </ApolloProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}